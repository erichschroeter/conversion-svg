/* Copyright ¬© SixtyFPS GmbH <info@slint-ui.com>
 * SPDX-License-Identifier: MIT OR Apache-2.0
 */

import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox
} from "std-widgets.slint";

export struct Action {
    command: string,
    package: string,
    extra: string, // bin or test name
    arguments: string,
}

component Pane inherits Rectangle {
    // capture all clicks
    TouchArea {}
}

export struct TreeNode {
    text: string,
    dep_kind: string,
    indentation: int,
    has_children: bool,
    open: bool,
    parent_package: string,
}

export global TreeData {
    out property <[TreeNode]> model;
    // the parameter is the parent_package and the text, and the dependency type
    callback request_upgrade(string, string, string);
    // the parameter is the parent_package and the text, and the dependency type
    callback remove(string, string, string);
    // crate name, and dependency type
    callback add_dependency(string, string);
    // whether the "add dependency" field should be enabled
    out property <bool> package-selected : true;
}

component TreePane inherits Pane {
    property <[TreeNode]> model: TreeData.model;
    property <bool> completion_shown;
    min-height: 40px;

    ListView {
        for node in model : HorizontalLayout {
            width: self.preferred-width;
            spacing: 5px;
            Rectangle { width: node.indentation * 20px; }
            Text {
                text: !node.has_children ? "" : node.open ? "‚äü" : "‚äû";
                horizontal-alignment: right;
                vertical-alignment: center;
                width: 20px;
                TouchArea {
                    clicked => { node.open = !node.open; }
                }
            }
            text := Text {
                text: node.text;
                vertical-alignment: center;
            }
            if (node.dep_kind != "") : Text {
                text: " (\{node.dep_kind})";
                color: gray;
                vertical-alignment: center;
            }
            if (node.indentation == 1) : Button {
                clicked => { TreeData.remove(node.parent_package, node.text, node.dep_kind); }
                text: "üóëÔ∏è Remove";
                min-height: text.preferred_height * 1.25;
            }
        }
    }
}


/*
Debug_TreePane := Window {
    title: "Cargo UI";
    preferred_height: 500px;
    preferred_width: 300px;
    TreePane{
        model: [
        { text: "AAA", indentation: 0, has_children: true, open: true },
        { text: "BBB", indentation: 1, has_children: false, open: false, },
        { text: "CCC", indentation: 1, has_children: false, open: false, },
        { text: "DDD", indentation: 1, has_children: true , open: true, },
        { text: "EEE", indentation: 2, has_children: true , open: false, },
        { text: "FFF", indentation: 1, has_children: false , open: false, },

    ];
    }
}
*/

export struct Feature {
    name: string,
    enabled: bool,
    enabled_by_default: bool,
}

export component TreeView inherits GridBox {
    // Public properties
    property <string> status: "Cargo UI";
    property <[string]> packages;
    property <bool> allow-package-selection: false;
    property <string> current-package;
    property <[string]> extra-run;
    property <[string]> extra-test;
    callback action(Action);
    in-out property <string> root_directory <=> le_rootdir.text;
    callback reload-tree(string);
    callback show-folder-dialog;
    property <bool> build-pane-visible;
    property <[TreeNode]> deptree;
    property <bool> has-features;
    property <[Feature]> package-features;
    property <bool> enable-default-features;
    callback package-selected(string);

    property <brush> background;

    // Private properties
    property <bool> deptree-pane-visible;

    Row {
        HorizontalLayout {
        vertical_stretch: 0;
            colspan: 3;
            le_rootdir := LineEdit {
                accepted => { root.reload-tree(le_rootdir.text); }
                horizontal_stretch: 1;
            }
            open_button := Button {
                text: "üìÇ";
                clicked => { root.show-folder-dialog(); }
            }
        }
    }

    Row {
        TreePane {
            vertical_stretch: 1;
        }
    }
    Row {
        Text {
            vertical-stretch: 0;
            text: "Tree Pane";
        }
    }
    // deptree := Rectangle {
    //     row: 2;
    //     colspan: 4;
    //     rowspan: 8;
    //     property <float> animate_opacity: deptree-pane-visible ? 1 : 0;
    //     animate animate_opacity { duration: 250ms; easing: ease; }

    //     if (deptree.animate_opacity > 0.01) : TreePane {
    //                     background: root.background;
    //         opacity: parent.animate_opacity;
    //         back => { deptree-pane-visible = true; }
    //     }
    // }
}